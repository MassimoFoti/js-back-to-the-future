{"version":3,"sources":["jasmineTree.js"],"names":["window","jasmineTree","version","CONST","CSS_CLASSES","SUMMARY","TRIGGER","TOOLBAR","BUTTON","NODE_OPENED","SELECTORS","FIRST_CHILD","ROOT_SUITE","NODE_TITLE","NODE_SPECS","NODE_SUITES","TEXT","COLLAPSE","EXPAND","SEPARATOR","PLUS","MINUS","FILTER_REGEXP","RegExp","rootSuites","getSpecFilter","match","exec","location","search","decodeURIComponent","replace","collapseAll","i","length","collapse","expandAll","expand","addRootClass","jQuery","addClass","addToolbar","toolbar","text","append","separator","click","event","preventDefault","insertBefore","filterSpec","filter","containsPath","Suite","options","config","rootNode","rootPath","extend","self","this","suites","specs","fullPath","expanded","triggerNode","attachEvents","getPath","path","str","subStr","substring","startsWith","j","trim","show","hide","removeClass","titleNode","find","each","index","item","push","childSuite","init","suite","jasmine","getEnv","addReporter","jasmineDone"],"mappings":"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","file":"jasmineTree.min.js","sourcesContent":["/* global jasmine */\r\n\r\n/* istanbul ignore if */\r\nif(typeof(jQuery) === \"undefined\"){\r\n\tthrow(\"Unable to find jQuery\");\r\n}\r\n\r\n/* istanbul ignore if */\r\nif(typeof(window.jasmineTree) === \"undefined\"){\r\n\twindow.jasmineTree = {};\r\n}\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tjasmineTree.version = \"1.0\";\r\n\r\n\tvar CONST = {\r\n\t\tCSS_CLASSES: {\r\n\t\t\tSUMMARY: \"jasmine-tree-summary\",\r\n\t\t\tTRIGGER: \"jasmine-tree-trigger\",\r\n\t\t\tTOOLBAR: \"jasmine-tree-toolbar\",\r\n\t\t\tBUTTON: \"jasmine-tree-button\",\r\n\t\t\tNODE_OPENED: \"jasmine-tree-opennode\"\r\n\t\t},\r\n\t\tSELECTORS: {\r\n\t\t\tFIRST_CHILD: \":first-child\",\r\n\t\t\tSUMMARY: \".summary,.jasmine-summary\",\r\n\t\t\tROOT_SUITE: \".summary > .suite,.jasmine-summary > .jasmine-suite\",\r\n\t\t\tNODE_TITLE: \"> li.suite-detail,> li.jasmine-suite-detail\",\r\n\t\t\tNODE_SPECS: \"> ul.specs,> ul.jasmine-specs\",\r\n\t\t\tNODE_SUITES: \"> ul.suite,> ul.jasmine-suite\"\r\n\t\t},\r\n\t\tTEXT: {\r\n\t\t\tCOLLAPSE: \"Collapse All\",\r\n\t\t\tEXPAND: \"Expand All\",\r\n\t\t\tSEPARATOR: \" | \",\r\n\t\t\tPLUS: \"+\",\r\n\t\t\tMINUS: \"-\"\r\n\t\t},\r\n\t\tFILTER_REGEXP: (new RegExp(\"[?&]spec=([^&]*)\"))\r\n\t};\r\n\r\n\t/** @type {Array.<jasmineTree.Suite>} */\r\n\tvar rootSuites = [];\r\n\r\n\t/**\r\n\t * Returns the value of the \"spec\" parameter in the querystring. Null if it's not specified\r\n\t * @return {null|String}\r\n\t */\r\n\tjasmineTree.getSpecFilter = function(){\r\n\t\tvar match = CONST.FILTER_REGEXP.exec(window.location.search);\r\n\t\treturn match && decodeURIComponent(match[1].replace(/\\+/g, \" \"));\r\n\t};\r\n\r\n\t/**\r\n\t * Collapse all the suites\r\n\t */\r\n\tjasmineTree.collapseAll = function(){\r\n\t\tfor(var i = 0; i < rootSuites.length; i++){\r\n\t\t\trootSuites[i].collapse();\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Expand all the suites\r\n\t */\r\n\tjasmineTree.expandAll = function(){\r\n\t\tfor(var i = 0; i < rootSuites.length; i++){\r\n\t\t\trootSuites[i].expand();\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Add a CSS class to the summary to enable more specific CSS selectors\r\n\t */\r\n\tjasmineTree.addRootClass = function(){\r\n\t\tjQuery(CONST.SELECTORS.SUMMARY).addClass(CONST.CSS_CLASSES.SUMMARY);\r\n\t};\r\n\r\n\t/**\r\n\t * Insert toolbar with expand/collapse all buttons\r\n\t */\r\n\tjasmineTree.addToolbar = function(){\r\n\r\n\t\tvar toolbar = jQuery(\"<div></div>\").addClass(CONST.CSS_CLASSES.TOOLBAR);\r\n\t\tvar collapse = jQuery(\"<span></span>\").addClass(CONST.CSS_CLASSES.BUTTON).text(CONST.TEXT.COLLAPSE);\r\n\t\ttoolbar.append(collapse);\r\n\t\tvar separator = jQuery(\"<span></span>\").text(CONST.TEXT.SEPARATOR);\r\n\t\ttoolbar.append(separator);\r\n\t\tvar expand = jQuery(\"<span></span>\").addClass(CONST.CSS_CLASSES.BUTTON).text(CONST.TEXT.EXPAND);\r\n\t\ttoolbar.append(expand);\r\n\r\n\t\tcollapse.click(function(event){\r\n\t\t\tevent.preventDefault();\r\n\t\t\tjasmineTree.collapseAll();\r\n\t\t});\r\n\r\n\t\texpand.click(function(event){\r\n\t\t\tevent.preventDefault();\r\n\t\t\tjasmineTree.expandAll();\r\n\t\t});\r\n\r\n\t\ttoolbar.insertBefore(jQuery(CONST.SELECTORS.SUMMARY));\r\n\t};\r\n\r\n\t/**\r\n\t * Check the querystring and expand/collapse suites based on filter criteria (if any)\r\n\t */\r\n\tjasmineTree.filterSpec = function(){\r\n\t\tvar filter = jasmineTree.getSpecFilter();\r\n\t\tif(filter === null){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t// We have a filter. First collapse all\r\n\t\tjasmineTree.collapseAll();\r\n\t\t// Then expand only the suites that match\r\n\t\tfor(var i = 0; i < rootSuites.length; i++){\r\n\t\t\tif(rootSuites[i].containsPath(filter) === true){\r\n\t\t\t\trootSuites[i].expand();\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} jasmineTree.Suite.options\r\n\t *\r\n\t * @property {jQuery} rootNode\r\n\t * @property {String} rootPath\r\n\t */\r\n\r\n\t/**\r\n\t * Wrapper around a suite's HTML node. Adds expand/collapse capabilities\r\n\t * @param {jasmineTree.Suite.options} options\r\n\t * @constructor\r\n\t */\r\n\tjasmineTree.Suite = function(options){\r\n\t\tvar config = {\r\n\t\t\trootNode: null,\r\n\t\t\trootPath: \"\"\r\n\t\t};\r\n\t\tjQuery.extend(config, options);\r\n\r\n\t\t/** @type  {jasmineTree.Suite} */\r\n\t\tvar self = this;\r\n\r\n\t\t/** @type {Array.<jasmineTree.Suite>} */\r\n\t\tvar suites = [];\r\n\t\t/** @type {Array.<jQuery>} */\r\n\t\tvar specs = [];\r\n\r\n\t\tvar fullPath = \"\";\r\n\t\tvar expanded = true;\r\n\t\tvar triggerNode = jQuery(\"<a></a>\").text(CONST.TEXT.MINUS).addClass(CONST.CSS_CLASSES.TRIGGER);\r\n\r\n\t\tvar init = function(){\r\n\t\t\tconfig.rootNode.addClass(CONST.CSS_CLASSES.NODE_OPENED);\r\n\r\n\t\t\tvar titleNode = config.rootNode.find(CONST.SELECTORS.NODE_TITLE);\r\n\r\n\t\t\tfullPath = config.rootPath + jQuery.trim(titleNode.text());\r\n\t\t\ttriggerNode.insertBefore(titleNode.find(CONST.SELECTORS.FIRST_CHILD));\r\n\r\n\t\t\tconfig.rootNode.find(CONST.SELECTORS.NODE_SPECS).each(function(index, item){\r\n\t\t\t\tspecs.push(jQuery(item));\r\n\t\t\t});\r\n\t\t\tconfig.rootNode.find(CONST.SELECTORS.NODE_SUITES).each(function(index, item){\r\n\t\t\t\tvar childSuite = new jasmineTree.Suite({\r\n\t\t\t\t\trootNode: jQuery(item),\r\n\t\t\t\t\trootPath: fullPath + \" \"\r\n\t\t\t\t});\r\n\t\t\t\tsuites.push(childSuite);\r\n\t\t\t});\r\n\t\t\tattachEvents();\r\n\t\t};\r\n\r\n\t\tvar attachEvents = function(){\r\n\t\t\ttriggerNode.click(function(event){\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tif(expanded === true){\r\n\t\t\t\t\tself.collapse();\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tself.expand();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\tvar startsWith = function(str, subStr){\r\n\t\t\treturn (str.substring(0, subStr.length) === subStr);\r\n\t\t};\r\n\r\n\t\tthis.getPath = function(){\r\n\t\t\treturn fullPath;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Given a filter string, coming from the querystring, search if the suite contains specs that match it\r\n\t\t * @param {String} path\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.containsPath = function(path){\r\n\t\t\t// Matches the suite\r\n\t\t\tif(startsWith(self.getPath(), path) === true){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\t// Search inside child specs\r\n\t\t\tfor(var j = 0; j < specs.length; j++){\r\n\t\t\t\tvar specPath = self.getPath() + \" \" + jQuery.trim(specs[j].text());\r\n\t\t\t\tif(specPath === path){\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Search inside child suites\r\n\t\t\tfor(var i = 0; i < suites.length; i++){\r\n\t\t\t\tif(suites[i].containsPath(path) === true){\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t};\r\n\r\n\t\tthis.show = function(){\r\n\t\t\tconfig.rootNode.show();\r\n\t\t};\r\n\r\n\t\tthis.hide = function(){\r\n\t\t\tconfig.rootNode.hide();\r\n\t\t};\r\n\r\n\t\tthis.collapse = function(){\r\n\t\t\tconfig.rootNode.removeClass(CONST.CSS_CLASSES.NODE_OPENED);\r\n\t\t\ttriggerNode.text(CONST.TEXT.PLUS);\r\n\t\t\tfor(var i = 0; i < suites.length; i++){\r\n\t\t\t\tsuites[i].collapse();\r\n\t\t\t\tsuites[i].hide();\r\n\t\t\t}\r\n\t\t\tfor(var j = 0; j < specs.length; j++){\r\n\t\t\t\tspecs[j].hide();\r\n\t\t\t}\r\n\t\t\texpanded = false;\r\n\t\t};\r\n\r\n\t\tthis.expand = function(){\r\n\t\t\tconfig.rootNode.addClass(CONST.CSS_CLASSES.NODE_OPENED);\r\n\t\t\ttriggerNode.text(CONST.TEXT.MINUS);\r\n\t\t\tfor(var i = 0; i < suites.length; i++){\r\n\t\t\t\tsuites[i].expand();\r\n\t\t\t\tsuites[i].show();\r\n\t\t\t}\r\n\t\t\tfor(var j = 0; j < specs.length; j++){\r\n\t\t\t\tspecs[j].show();\r\n\t\t\t}\r\n\t\t\texpanded = true;\r\n\t\t};\r\n\r\n\t\tinit();\r\n\t};\r\n\r\n\t/**\r\n\t * This must be invoked after Jasmine finished executing\r\n\t */\r\n\tjasmineTree.init = function(){\r\n\t\tjQuery(CONST.SELECTORS.ROOT_SUITE).each(function(index, item){\r\n\t\t\tvar suite = new jasmineTree.Suite({\r\n\t\t\t\trootNode: jQuery(item)\r\n\t\t\t});\r\n\t\t\trootSuites.push(suite);\r\n\t\t});\r\n\t\tjasmineTree.addRootClass();\r\n\t\tjasmineTree.addToolbar();\r\n\t\tjasmineTree.filterSpec();\r\n\t};\r\n\r\n\tjasmine.getEnv().addReporter({\r\n\t\tjasmineDone: function(){\r\n\t\t\tjasmineTree.init();\r\n\t\t}\r\n\t});\r\n\r\n}());"],"sourceRoot":"."}
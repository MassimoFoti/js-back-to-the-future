{"version":3,"sources":["jasmineFixtures.js"],"names":["window","jasmineFixtures","version","config","basePath","containerId","styleNodes","cache","clearCache","clearCSS","forEach","element","remove","clearHTML","getContainer","appendCSS","path","preload","appendStyle","readFromCache","appendHTML","appendToContainer","loadCSS","loadHTML","loadIntoContainer","jQuery","type","fullUrl","assembleUrl","readIntoCache","read","setCSS","css","setHTML","html","setup","options","extend","length","cssNode","text","push","append","currentContainer","find","container","attr","empty","url","ajax","async","done","data","fail","jqXHR","status","jasmine","getEnv","afterEach"],"mappings":";;;;;AACA,GAAA,oBAAA,OACA,KAAA,6BADA,IAAAA,OAAA,kBACAA,OAAAC,oBAUA,WACA,aAEAA,gBAAAC,QAAA,MAKA,IAAAC,QACAC,SAAA,YACAC,YAAA,oBAMAC,cAKAL,gBAAAM,SAEAN,gBAAAO,WAAA,WACAP,gBAAAM,UAGAN,gBAAAQ,SAAA,WACAH,WAAAI,QAAA,SAAAC,SACAA,QAAAC,YAIAX,gBAAAY,UAAA,WACAC,eAAAF,UAMAX,gBAAAc,UAAA,SAAAC,MACAf,gBAAAgB,QAAAD,MACAE,YAAAC,cAAAH,QAMAf,gBAAAmB,WAAA,SAAAJ,MACAf,gBAAAgB,QAAAD,MACAK,kBAAAF,cAAAH,QAMAf,gBAAAqB,QAAA,SAAAN,MACAf,gBAAAgB,QAAAD,MACAf,gBAAAQ,WACAS,YAAAC,cAAAH,QAMAf,gBAAAsB,SAAA,SAAAP,MACAf,gBAAAgB,QAAAD,MACAQ,kBAAAL,cAAAH,QAMAf,gBAAAgB,QAAA,SAAAD,MACA,WAAAS,OAAAC,KAAAV,QACAA,MAAAA,OAEAA,KAAAN,QAAA,SAAAC,SACA,IAAAgB,QAAAC,YAAAjB,SACA,cAAAc,OAAAC,KAAAzB,gBAAAM,MAAAoB,WACAE,cAAAF,YASA1B,gBAAA6B,KAAA,SAAAd,MAEA,OADAf,gBAAAgB,QAAAD,MACAG,cAAAH,OAMAf,gBAAA8B,OAAA,SAAAC,KACA/B,gBAAAQ,WACAS,YAAAc,MAMA/B,gBAAAgC,QAAA,SAAAC,MACAV,kBAAAU,OAQAjC,gBAAAkC,MAAA,SAAAC,SAMA,OALAX,OAAAY,OAAAlC,OAAAiC,SAEA,MAAAjC,OAAAC,SAAAD,OAAAC,SAAAkC,OAAA,KACAnC,OAAAC,UAAA,KAEAD,QAMA,IAAAe,YAAA,SAAAc,KACA,IAAAO,QAAAd,OAAA,WACAc,QAAAC,KAAAR,KACA1B,WAAAmC,KAAAF,SACAd,OAAA,QAAAiB,OAAAH,UAMAlB,kBAAA,SAAAa,MACApB,eACA4B,OAAAR,OAOAN,YAAA,SAAAZ,MACA,OAAAb,OAAAC,SAAAY,MAMAF,aAAA,WACA,IAAA6B,iBAAAlB,OAAA,QAAAmB,KAAA,IAAAzC,OAAAE,aACA,GAAA,IAAAsC,iBAAAL,OACA,OAAAK,iBAGA,IAAAE,UAAApB,OAAA,SAGA,OAFAoB,UAAAC,KAAA,KAAA3C,OAAAE,aACAoB,OAAA,QAAAiB,OAAAG,WACAA,WAOArB,kBAAA,SAAAU,MACA,IAAAW,UAAA/B,eACA+B,UAAAE,QACAF,UAAAH,OAAAR,OAOAf,cAAA,SAAAH,MACA,OAAAf,gBAAAM,MAAAqB,YAAAZ,QAMAa,cAAA,SAAAmB,KACAvB,OAAAwB,MACAD,IAAAA,IACAE,OAAA,EACA3C,OAAA,IACA4C,KAAA,SAAAC,MACAnD,gBAAAM,MAAAyC,KAAAI,OACAC,KAAA,SAAAC,OACA,KAAA,kCAAAN,IAAA,aAAAM,MAAAC,OAAA,OAjMA,GAuMAC,QAAAC,SAAAC,UAAA,WACA,aACAzD,gBAAAQ,WACAR,gBAAAY","file":"jasmineFixtures.min.js","sourcesContent":["/* istanbul ignore if */\r\nif(typeof(jQuery) === \"undefined\"){\r\n\tthrow(\"Unable to find jQuery\");\r\n}\r\n\r\n/* istanbul ignore else */\r\nif(typeof(window.jasmineFixtures) === \"undefined\"){\r\n\twindow.jasmineFixtures = {};\r\n}\r\n\r\n/**\r\n * @typedef {Object} jasmineFixtures.options\r\n *\r\n * @property {String} basePath        Base path for fixtures. Default to \"fixtures/\"\r\n * @property {String} containerId     Used as id attribute for the <div> where fixtures are loaded. Default to \"jasmine-fixtures\"\r\n */\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tjasmineFixtures.version = \"0.3\";\r\n\r\n\t/**\r\n\t * @type {jasmineFixtures.options}\r\n\t */\r\n\tvar config = {\r\n\t\tbasePath: \"fixtures/\",\r\n\t\tcontainerId: \"jasmine-fixtures\"\r\n\t};\r\n\r\n\t/**\r\n\t * @type {Array.<JQuery>}\r\n\t */\r\n\tvar styleNodes = [];\r\n\r\n\t/**\r\n\t * @type {Object.<String, String>}\r\n\t */\r\n\tjasmineFixtures.cache = {};\r\n\r\n\tjasmineFixtures.clearCache = function(){\r\n\t\tjasmineFixtures.cache = {};\r\n\t};\r\n\r\n\tjasmineFixtures.clearCSS = function(){\r\n\t\tstyleNodes.forEach(function(element){\r\n\t\t\telement.remove();\r\n\t\t});\r\n\t};\r\n\r\n\tjasmineFixtures.clearHTML = function(){\r\n\t\tgetContainer().remove();\r\n\t};\r\n\r\n\t/**\r\n\t * @param {String} path\r\n\t */\r\n\tjasmineFixtures.appendCSS = function(path){\r\n\t\tjasmineFixtures.preload(path);\r\n\t\tappendStyle(readFromCache(path));\r\n\t};\r\n\r\n\t/**\r\n\t * @param {String} path\r\n\t */\r\n\tjasmineFixtures.appendHTML = function(path){\r\n\t\tjasmineFixtures.preload(path);\r\n\t\tappendToContainer(readFromCache(path));\r\n\t};\r\n\r\n\t/**\r\n\t * @param {String} path\r\n\t */\r\n\tjasmineFixtures.loadCSS = function(path){\r\n\t\tjasmineFixtures.preload(path);\r\n\t\tjasmineFixtures.clearCSS();\r\n\t\tappendStyle(readFromCache(path));\r\n\t};\r\n\r\n\t/**\r\n\t * @param {String} path\r\n\t */\r\n\tjasmineFixtures.loadHTML = function(path){\r\n\t\tjasmineFixtures.preload(path);\r\n\t\tloadIntoContainer(readFromCache(path));\r\n\t};\r\n\r\n\t/**\r\n\t * @param {String|Array.<String>} path\r\n\t */\r\n\tjasmineFixtures.preload = function(path){\r\n\t\tif(jQuery.type(path) === \"string\"){\r\n\t\t\tpath = [path];\r\n\t\t}\r\n\t\tpath.forEach(function(element){\r\n\t\t\tvar fullUrl = assembleUrl(element);\r\n\t\t\tif(jQuery.type(jasmineFixtures.cache[fullUrl]) === \"undefined\"){\r\n\t\t\t\treadIntoCache(fullUrl);\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * @param {String} path\r\n\t * @return {String|Object}\r\n\t */\r\n\tjasmineFixtures.read = function(path){\r\n\t\tjasmineFixtures.preload(path);\r\n\t\treturn readFromCache(path);\r\n\t};\r\n\r\n\t/**\r\n\t * @param {String} css\r\n\t */\r\n\tjasmineFixtures.setCSS = function(css){\r\n\t\tjasmineFixtures.clearCSS();\r\n\t\tappendStyle(css);\r\n\t};\r\n\r\n\t/**\r\n\t * @param {String} html\r\n\t */\r\n\tjasmineFixtures.setHTML = function(html){\r\n\t\tloadIntoContainer(html);\r\n\t};\r\n\r\n\t/**\r\n\t * ChangeÂ¨/retrieve current configuration\r\n\t * @param {jasmineFixtures.options} [options]\r\n\t * @return {jasmineFixtures.options}\r\n\t */\r\n\tjasmineFixtures.setup = function(options){\r\n\t\tjQuery.extend(config, options);\r\n\t\t// Ensure we always have a trailing slash\r\n\t\tif(config.basePath[config.basePath.length - 1] !== \"/\"){\r\n\t\t\tconfig.basePath += \"/\";\r\n\t\t}\r\n\t\treturn config;\r\n\t};\r\n\r\n\t/**\r\n\t * @param {String} css\r\n\t */\r\n\tvar appendStyle = function(css){\r\n\t\tvar cssNode = jQuery(\"<style>\");\r\n\t\tcssNode.text(css);\r\n\t\tstyleNodes.push(cssNode);\r\n\t\tjQuery(\"head\").append(cssNode);\r\n\t};\r\n\r\n\t/**\r\n\t * @param {String} html\r\n\t */\r\n\tvar appendToContainer = function(html){\r\n\t\tvar container = getContainer();\r\n\t\tcontainer.append(html);\r\n\t};\r\n\r\n\t/**\r\n\t * @param {String} path\r\n\t * @return {String}\r\n\t */\r\n\tvar assembleUrl = function(path){\r\n\t\treturn config.basePath + path;\r\n\t};\r\n\r\n\t/**\r\n\t * @return {JQuery}\r\n\t */\r\n\tvar getContainer = function(){\r\n\t\tvar currentContainer = jQuery(\"body\").find(\"#\" + config.containerId);\r\n\t\tif(currentContainer.length !== 0){\r\n\t\t\treturn currentContainer;\r\n\t\t}\r\n\t\telse{\r\n\t\t\tvar container = jQuery(\"<div>\");\r\n\t\t\tcontainer.attr(\"id\", config.containerId);\r\n\t\t\tjQuery(\"body\").append(container);\r\n\t\t\treturn container;\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * @param {String} html\r\n\t */\r\n\tvar loadIntoContainer = function(html){\r\n\t\tvar container = getContainer();\r\n\t\tcontainer.empty();\r\n\t\tcontainer.append(html);\r\n\t};\r\n\r\n\t/**\r\n\t * @param {String} path\r\n\t * @return {String|Object}\r\n\t */\r\n\tvar readFromCache = function(path){\r\n\t\treturn jasmineFixtures.cache[assembleUrl(path)];\r\n\t};\r\n\r\n\t/**\r\n\t * @param {String} url\r\n\t */\r\n\tvar readIntoCache = function(url){\r\n\t\tjQuery.ajax({\r\n\t\t\turl: url,\r\n\t\t\tasync: false, // Must be synchronous to ensure fixtures are loaded before test run\r\n\t\t\tcache: false\r\n\t\t}).done(function(data){\r\n\t\t\tjasmineFixtures.cache[url] = data;\r\n\t\t}).fail(function(jqXHR){\r\n\t\t\tthrow (\"Failed to retrieve fixture at: \" + url + \" (status: \" + jqXHR.status + \")\");\r\n\t\t});\r\n\t};\r\n\r\n}());\r\n\r\njasmine.getEnv().afterEach(function(){\r\n\t\"use strict\";\r\n\tjasmineFixtures.clearCSS();\r\n\tjasmineFixtures.clearHTML();\r\n});"],"sourceRoot":"."}
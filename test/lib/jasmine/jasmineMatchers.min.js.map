{"version":3,"sources":["jasmineMatchers.js"],"names":["window","jasmineMatchers","version","toHaveProperty","compare","actual","propertyName","expectedValue","result","pass","jQuery","type","message","undefined","hasProperty","toMatchDuckType","duckType","matchType","key","hasOwnProperty","duckProp","toHaveReadonly","parentObject","property","desc","Object","getOwnPropertyDescriptor","writable","actualValue","toBeChecked","element","is","toBeDisabled","toBeEmpty","toBeMatchedBy","selector","filter","length","toBeSelected","toBeVisible","toHaveAttr","attributeName","attr","toHaveClass","className","hasClass","toHaveCss","css","toHaveProp","prop","jasmine","getEnv","beforeEach","addMatchers"],"mappings":";;;;;AACA,GAAA,oBAAA,OACA,KAAA,6BADA,IAAAA,OAAA,kBACAA,OAAAC,oBAUA,WACA,aAEAA,gBAAAC,QAAA,MAIAD,gBAAAE,eAAA,WACA,OAOAC,QAAA,SAAAC,OAAAC,aAAAC,eACA,IAAAC,QACAC,MAAA,GAEA,MAAA,WAAAC,OAAAC,KAAAL,eACAE,OAAAI,QAAA,wCACAJ,aAEAK,IAAAR,OAAAC,eACAE,OAAAI,QAAA,aAAAN,aAAA,aACAE,SAEA,IAAAM,YAAAT,OAAAC,cAAAC,gBACAC,OAAAC,MAAA,EACAD,SAGAA,OAAAI,QAAA,aAAAN,aAAA,cAAAC,cAAA,0BAAAF,OAAAC,cACAE,WAMAP,gBAAAc,gBAAA,WACA,OAOAX,QAAA,SAAAC,OAAAW,SAAAC,WACA,IAAAT,QACAC,MAAA,GAEA,QAAAI,IAAAG,SAEA,OADAR,OAAAI,QAAA,2CACAJ,OAEA,GAAAE,OAAAC,KAAAN,UAAAK,OAAAC,KAAAK,UAEA,OADAR,OAAAI,QAAA,6BAAAF,OAAAC,KAAAN,QAAA,OAAAK,OAAAC,KAAAK,UACAR,YAEAK,IAAAI,YAEAA,WAAA,GAEA,IAAA,IAAAC,OAAAF,SAEA,IAAA,IAAAA,SAAAG,eAAAD,KAAA,CACA,IAAAE,SAAAJ,SAAAE,KACA,IAAA,IAAAb,OAAAc,eAAAD,KAWA,OADAV,OAAAI,QAAA,4CAAAM,IACAV,OAVA,IAAA,IAAAS,WACAP,OAAAC,KAAAS,YAAAV,OAAAC,KAAAN,OAAAa,MAGA,OAFAV,OAAAC,MAAA,EACAD,OAAAI,QAAA,aAAAM,IAAA,oCAAAR,OAAAC,KAAAS,UACAZ,OAWA,OADAA,OAAAC,MAAA,EACAD,UAKAP,gBAAAoB,eAAA,WACA,OAMAjB,QAAA,SAAAkB,aAAAC,UACA,IAAAf,QACAC,MAAA,GAEA,GAAA,WAAAC,OAAAC,KAAAY,UAEA,OADAf,OAAAI,QAAA,oDACAJ,OAEA,IAAAgB,KAAAC,OAAAC,yBAAAJ,aAAAC,UACA,YAAAV,IAAAW,MACAhB,OAAAI,QAAA,4BAAAW,SACAf,SAEA,IAAAgB,KAAAG,UACAnB,OAAAC,MAAA,EACAD,SAEAA,OAAAI,QAAA,aAAAW,SAAA,mBACAf,WAOA,IAAAM,YAAA,SAAAc,YAAArB,eACA,YAAAM,IAAAN,mBACAM,IAAAe,YAEAA,cAAArB,eAGAN,gBAAA4B,YAAA,WACA,OAKAzB,QAAA,SAAA0B,SACA,IAAAtB,QACAC,MAAA,GAEA,OAAA,IAAAC,OAAAoB,SAAAC,GAAA,aACAvB,OAAAC,MAAA,EACAD,SAGAA,OAAAI,QAAA,yBACAJ,WAMAP,gBAAA+B,aAAA,WACA,OAKA5B,QAAA,SAAA0B,SACA,IAAAtB,QACAC,MAAA,GAEA,OAAA,IAAAC,OAAAoB,SAAAC,GAAA,cACAvB,OAAAC,MAAA,EACAD,SAGAA,OAAAI,QAAA,0BACAJ,WAMAP,gBAAAgC,UAAA,WACA,OAKA7B,QAAA,SAAA0B,SACA,IAAAtB,QACAC,MAAA,GAEA,OAAA,IAAAC,OAAAoB,SAAAC,GAAA,WACAvB,OAAAC,MAAA,EACAD,SAGAA,OAAAI,QAAA,uBACAJ,WAMAP,gBAAAiC,cAAA,WACA,OAMA9B,QAAA,SAAA0B,QAAAK,UACA,IAAA3B,QACAC,MAAA,GAEA,MAAA,WAAAC,OAAAC,KAAAwB,WACA3B,OAAAI,QAAA,wCACAJ,QAEAE,OAAAoB,SAAAM,OAAAD,UAAAE,OAAA,GACA7B,OAAAC,MAAA,EACAD,SAGAA,OAAAI,QAAA,2BAAAuB,SACA3B,WAMAP,gBAAAqC,aAAA,WACA,OAKAlC,QAAA,SAAA0B,SACA,IAAAtB,QACAC,MAAA,GAEA,OAAA,IAAAC,OAAAoB,SAAAC,GAAA,cACAvB,OAAAC,MAAA,EACAD,SAGAA,OAAAI,QAAA,0BACAJ,WAMAP,gBAAAsC,YAAA,WACA,OAKAnC,QAAA,SAAA0B,SACA,IAAAtB,QACAC,MAAA,GAEA,OAAA,IAAAC,OAAAoB,SAAAC,GAAA,aACAvB,OAAAC,MAAA,EACAD,SAGAA,OAAAI,QAAA,yBACAJ,WAMAP,gBAAAuC,WAAA,WACA,OAOApC,QAAA,SAAA0B,QAAAW,cAAAlC,eACA,IAAAC,QACAC,MAAA,GAEA,MAAA,WAAAC,OAAAC,KAAA8B,gBACAjC,OAAAI,QAAA,yCACAJ,SAEA,IAAAM,YAAAJ,OAAAoB,SAAAY,KAAAD,eAAAlC,gBACAC,OAAAC,MAAA,EACAD,SAGAA,OAAAI,QAAA,cAAA6B,cAAA,kBACAjC,WAMAP,gBAAA0C,YAAA,WACA,OAMAvC,QAAA,SAAA0B,QAAAc,WACA,IAAApC,QACAC,MAAA,GAEA,MAAA,WAAAC,OAAAC,KAAAiC,YACApC,OAAAI,QAAA,qDACAJ,SAEA,IAAAE,OAAAoB,SAAAe,SAAAD,YACApC,OAAAC,MAAA,EACAD,SAGAA,OAAAI,QAAA,cAAAgC,UAAA,aACApC,WAMAP,gBAAA6C,UAAA,WACA,OAOA1C,QAAA,SAAA0B,QAAAxB,aAAAC,eACA,IAAAC,QACAC,MAAA,GAEA,MAAA,WAAAC,OAAAC,KAAAL,eACAE,OAAAI,QAAA,4CACAJ,QAGA,KAAAE,OAAAoB,SAAAiB,IAAAzC,eAAA,QAAAI,OAAAoB,SAAAiB,IAAAzC,eACAE,OAAAI,QAAA,iBAAAN,aAAA,aACAE,SAEA,IAAAM,YAAAJ,OAAAoB,SAAAiB,IAAAzC,cAAAC,gBACAC,OAAAC,MAAA,EACAD,SAGAA,OAAAI,QAAA,iBAAAN,aAAA,kBACAE,WAMAP,gBAAA+C,WAAA,WACA,OAOA5C,QAAA,SAAA0B,QAAAxB,aAAAC,eACA,IAAAC,QACAC,MAAA,GAEA,MAAA,WAAAC,OAAAC,KAAAL,eACAE,OAAAI,QAAA,wCACAJ,SAEA,IAAAM,YAAAJ,OAAAoB,SAAAmB,KAAA3C,cAAAC,gBACAC,OAAAC,MAAA,EACAD,SAGAA,OAAAI,QAAA,aAAAN,aAAA,kBACAE,WAMA0C,QAAAC,SAAAC,WAAA,WACAF,QAAAC,SAAAE,YAAApD,mBA7XA","file":"jasmineMatchers.min.js","sourcesContent":["/* istanbul ignore if */\r\nif(typeof(jQuery) === \"undefined\"){\r\n\tthrow(\"Unable to find jQuery\");\r\n}\r\n\r\n/* istanbul ignore else */\r\nif(typeof(window.jasmineMatchers) === \"undefined\"){\r\n\twindow.jasmineMatchers = {};\r\n}\r\n\r\n/**\r\n * @typedef {Object} jasmineMatchers.result\r\n *\r\n * @property {Boolean} pass\r\n * @property {String} [message]\r\n */\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tjasmineMatchers.version = \"0.3\";\r\n\r\n\t/* Generic matchers */\r\n\r\n\tjasmineMatchers.toHaveProperty = function(){\r\n\t\treturn {\r\n\t\t\t/**\r\n\t\t\t * @param {Object} actual\r\n\t\t\t * @param {String} propertyName\r\n\t\t\t * @param {String} expectedValue\r\n\t\t\t * @return {jasmineMatchers.result}\r\n\t\t\t */\r\n\t\t\tcompare: function(actual, propertyName, expectedValue){\r\n\t\t\t\tvar result = {\r\n\t\t\t\t\tpass: false\r\n\t\t\t\t};\r\n\t\t\t\tif(jQuery.type(propertyName) !== \"string\"){\r\n\t\t\t\t\tresult.message = \"Please specify the property as string\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\tif(actual[propertyName] === undefined){\r\n\t\t\t\t\tresult.message = \"Property: \" + propertyName + \" not found\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\tif(hasProperty(actual[propertyName], expectedValue) === true){\r\n\t\t\t\t\tresult.pass = true;\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tresult.message = \"Expected: \" + propertyName + \" to equal: \" + expectedValue + \" but current value is: \" + actual[propertyName];\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\tjasmineMatchers.toMatchDuckType = function(){\r\n\t\treturn {\r\n\t\t\t/**\r\n\t\t\t * @param {Object} actual\r\n\t\t\t * @param {Object} duckType\r\n\t\t\t * @param {Boolean} [matchType] Define if we have to compare type of property. Default to true\r\n\t\t\t * @return {jasmineMatchers.result}\r\n\t\t\t */\r\n\t\t\tcompare: function(actual, duckType, matchType){\r\n\t\t\t\tvar result = {\r\n\t\t\t\t\tpass: false\r\n\t\t\t\t};\r\n\t\t\t\tif(duckType === undefined){\r\n\t\t\t\t\tresult.message = \"Please specify an instance of a duckType\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\tif(jQuery.type(actual) !== jQuery.type(duckType)){\r\n\t\t\t\t\tresult.message = \"Type mismatch, comparing: \" + jQuery.type(actual) + \" vs \" + jQuery.type(duckType);\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\tif(matchType === undefined){\r\n\t\t\t\t\t// By default we check for type\r\n\t\t\t\t\tmatchType = true;\r\n\t\t\t\t}\r\n\t\t\t\tfor(var key in duckType){\r\n\t\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\t\tif(duckType.hasOwnProperty(key) === true){\r\n\t\t\t\t\t\tvar duckProp = duckType[key];\r\n\t\t\t\t\t\tif(actual.hasOwnProperty(key) === true){\r\n\t\t\t\t\t\t\tif(matchType === true){\r\n\t\t\t\t\t\t\t\tif(jQuery.type(duckProp) !== jQuery.type(actual[key])){\r\n\t\t\t\t\t\t\t\t\tresult.pass = false;\r\n\t\t\t\t\t\t\t\t\tresult.message = \"Type of: .\" + key + \" does not match. Supposed to be: \" + jQuery.type(duckProp);\r\n\t\t\t\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\tresult.message = \"The following duck property is missing: .\" + key;\r\n\t\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tresult.pass = true;\r\n\t\t\t\treturn result;\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\tjasmineMatchers.toHaveReadonly = function(){\r\n\t\treturn {\r\n\t\t\t/**\r\n\t\t\t * @param {Object} parentObject\r\n\t\t\t * @param {String} property\r\n\t\t\t * @return {jasmineMatchers.result}\r\n\t\t\t */\r\n\t\t\tcompare: function(parentObject, property){\r\n\t\t\t\tvar result = {\r\n\t\t\t\t\tpass: false\r\n\t\t\t\t};\r\n\t\t\t\tif(jQuery.type(property) !== \"string\"){\r\n\t\t\t\t\tresult.message = \"Please specify the name of the property as string\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\tvar desc = Object.getOwnPropertyDescriptor(parentObject, property);\r\n\t\t\t\tif(desc === undefined){\r\n\t\t\t\t\tresult.message = \"Unable to find property: \" + property;\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\tif(desc.writable === false){\r\n\t\t\t\t\tresult.pass = true;\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\tresult.message = \"Property: \" + property + \" is not readonly\";\r\n\t\t\t\treturn result;\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\t/* jQuery-based matchers */\r\n\r\n\tvar hasProperty = function(actualValue, expectedValue){\r\n\t\tif(expectedValue === undefined){\r\n\t\t\treturn actualValue !== undefined;\r\n\t\t}\r\n\t\treturn actualValue === expectedValue;\r\n\t};\r\n\r\n\tjasmineMatchers.toBeChecked = function(){\r\n\t\treturn {\r\n\t\t\t/**\r\n\t\t\t * @param {jQuery} element\r\n\t\t\t * @return {jasmineMatchers.result}\r\n\t\t\t */\r\n\t\t\tcompare: function(element){\r\n\t\t\t\tvar result = {\r\n\t\t\t\t\tpass: false\r\n\t\t\t\t};\r\n\t\t\t\tif(jQuery(element).is(\":checked\") === true){\r\n\t\t\t\t\tresult.pass = true;\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tresult.message = \"Element is not checked\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\tjasmineMatchers.toBeDisabled = function(){\r\n\t\treturn {\r\n\t\t\t/**\r\n\t\t\t * @param {jQuery} element\r\n\t\t\t * @return {jasmineMatchers.result}\r\n\t\t\t */\r\n\t\t\tcompare: function(element){\r\n\t\t\t\tvar result = {\r\n\t\t\t\t\tpass: false\r\n\t\t\t\t};\r\n\t\t\t\tif(jQuery(element).is(\":disabled\") === true){\r\n\t\t\t\t\tresult.pass = true;\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tresult.message = \"Element is not disabled\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\tjasmineMatchers.toBeEmpty = function(){\r\n\t\treturn {\r\n\t\t\t/**\r\n\t\t\t * @param {jQuery} element\r\n\t\t\t * @return {jasmineMatchers.result}\r\n\t\t\t */\r\n\t\t\tcompare: function(element){\r\n\t\t\t\tvar result = {\r\n\t\t\t\t\tpass: false\r\n\t\t\t\t};\r\n\t\t\t\tif(jQuery(element).is(\":empty\") === true){\r\n\t\t\t\t\tresult.pass = true;\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tresult.message = \"Element is not empty\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\tjasmineMatchers.toBeMatchedBy = function(){\r\n\t\treturn {\r\n\t\t\t/**\r\n\t\t\t * @param {jQuery} element\r\n\t\t\t * @param {String} selector\r\n\t\t\t * @return {jasmineMatchers.result}\r\n\t\t\t */\r\n\t\t\tcompare: function(element, selector){\r\n\t\t\t\tvar result = {\r\n\t\t\t\t\tpass: false\r\n\t\t\t\t};\r\n\t\t\t\tif(jQuery.type(selector) !== \"string\"){\r\n\t\t\t\t\tresult.message = \"Please specify the selector as string\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\tif(jQuery(element).filter(selector).length > 0){\r\n\t\t\t\t\tresult.pass = true;\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tresult.message = \"Element not matched by: \" + selector;\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\tjasmineMatchers.toBeSelected = function(){\r\n\t\treturn {\r\n\t\t\t/**\r\n\t\t\t * @param {jQuery} element\r\n\t\t\t * @return {jasmineMatchers.result}\r\n\t\t\t */\r\n\t\t\tcompare: function(element){\r\n\t\t\t\tvar result = {\r\n\t\t\t\t\tpass: false\r\n\t\t\t\t};\r\n\t\t\t\tif(jQuery(element).is(\":selected\") === true){\r\n\t\t\t\t\tresult.pass = true;\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tresult.message = \"Element is not selected\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\tjasmineMatchers.toBeVisible = function(){\r\n\t\treturn {\r\n\t\t\t/**\r\n\t\t\t * @param {jQuery} element\r\n\t\t\t * @return {jasmineMatchers.result}\r\n\t\t\t */\r\n\t\t\tcompare: function(element){\r\n\t\t\t\tvar result = {\r\n\t\t\t\t\tpass: false\r\n\t\t\t\t};\r\n\t\t\t\tif(jQuery(element).is(\":visible\") === true){\r\n\t\t\t\t\tresult.pass = true;\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tresult.message = \"Element is not visible\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\tjasmineMatchers.toHaveAttr = function(){\r\n\t\treturn {\r\n\t\t\t/**\r\n\t\t\t * @param {jQuery} element\r\n\t\t\t * @param {String} attributeName\r\n\t\t\t * @param {String} expectedValue\r\n\t\t\t * @return {jasmineMatchers.result}\r\n\t\t\t */\r\n\t\t\tcompare: function(element, attributeName, expectedValue){\r\n\t\t\t\tvar result = {\r\n\t\t\t\t\tpass: false\r\n\t\t\t\t};\r\n\t\t\t\tif(jQuery.type(attributeName) !== \"string\"){\r\n\t\t\t\t\tresult.message = \"Please specify the attribute as string\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\tif(hasProperty(jQuery(element).attr(attributeName), expectedValue) === true){\r\n\t\t\t\t\tresult.pass = true;\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tresult.message = \"Attribute: \" + attributeName + \" does not match\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\tjasmineMatchers.toHaveClass = function(){\r\n\t\treturn {\r\n\t\t\t/**\r\n\t\t\t * @param {jQuery} element\r\n\t\t\t * @param {String} className\r\n\t\t\t * @return {jasmineMatchers.result}\r\n\t\t\t */\r\n\t\t\tcompare: function(element, className){\r\n\t\t\t\tvar result = {\r\n\t\t\t\t\tpass: false\r\n\t\t\t\t};\r\n\t\t\t\tif(jQuery.type(className) !== \"string\"){\r\n\t\t\t\t\tresult.message = \"Please specify the name of the CSS class as string\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\tif(jQuery(element).hasClass(className) === true){\r\n\t\t\t\t\tresult.pass = true;\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tresult.message = \"CSS class: \" + className + \" not found\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\tjasmineMatchers.toHaveCss = function(){\r\n\t\treturn {\r\n\t\t\t/**\r\n\t\t\t * @param {jQuery} element\r\n\t\t\t * @param {String} propertyName\r\n\t\t\t * @param {String} expectedValue\r\n\t\t\t * @return {jasmineMatchers.result}\r\n\t\t\t */\r\n\t\t\tcompare: function(element, propertyName, expectedValue){\r\n\t\t\t\tvar result = {\r\n\t\t\t\t\tpass: false\r\n\t\t\t\t};\r\n\t\t\t\tif(jQuery.type(propertyName) !== \"string\"){\r\n\t\t\t\t\tresult.message = \"Please specify the CSS property as string\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\t// Second case is Chrome only\r\n\t\t\t\tif(jQuery(element).css(propertyName) === \"\" || jQuery(element).css(propertyName) === \"0px\"){\r\n\t\t\t\t\tresult.message = \"CSS property: \" + propertyName + \" not found\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\tif(hasProperty(jQuery(element).css(propertyName), expectedValue) === true){\r\n\t\t\t\t\tresult.pass = true;\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tresult.message = \"CSS property: \" + propertyName + \" does not match\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\tjasmineMatchers.toHaveProp = function(){\r\n\t\treturn {\r\n\t\t\t/**\r\n\t\t\t * @param {jQuery} element\r\n\t\t\t * @param {String} propertyName\r\n\t\t\t * @param {String} expectedValue\r\n\t\t\t * @return {jasmineMatchers.result}\r\n\t\t\t */\r\n\t\t\tcompare: function(element, propertyName, expectedValue){\r\n\t\t\t\tvar result = {\r\n\t\t\t\t\tpass: false\r\n\t\t\t\t};\r\n\t\t\t\tif(jQuery.type(propertyName) !== \"string\"){\r\n\t\t\t\t\tresult.message = \"Please specify the property as string\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\tif(hasProperty(jQuery(element).prop(propertyName), expectedValue) === true){\r\n\t\t\t\t\tresult.pass = true;\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tresult.message = \"Property: \" + propertyName + \" does not match\";\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\tjasmine.getEnv().beforeEach(function(){\r\n\t\tjasmine.getEnv().addMatchers(jasmineMatchers);\r\n\t});\r\n\r\n}());"],"sourceRoot":"."}
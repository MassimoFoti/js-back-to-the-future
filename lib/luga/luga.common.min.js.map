{"version":3,"sources":["luga.common.js"],"names":["luga","attributesToProperties","node","obj","attributes","undefined","i","length","attr","xml","ATTRIBUTE_PREFIX","name","value","childrenToProperties","childNodes","child","nodeType","isArray","tagName","nodeName","constructor","Array","curValue","push","nodeHasText","getTextValue","childObj","nodeToHash","data","nextSibling","namespace","ns","rootObject","parts","split","window","common","version","extend","baseFunc","func","args","apply","isFunction","type","isPlainObject","Object","prototype","toString","call","proto","getPrototypeOf","hasOwnProperty","Function","lookupFunction","path","reference","lookupProperty","object","part","shift","merge","target","source","x","setProperty","class2type","forEach","element","collection","toLowerCase","rawType","stringType","NOTIFIER_CONST","ERROR_MESSAGES","NOTIFIER_ABSTRACT","INVALID_OBSERVER_PARAMETER","INVALID_DATA_PARAMETER","Notifier","this","observers","generateMethodName","eventName","str","charAt","toUpperCase","substring","addObserver","observer","notifyObservers","payload","method","removeObserver","splice","dom","nodeIterator","getInstance","rootNode","filterFunc","filter","acceptNode","NodeFilter","FILTER_SKIP","FILTER_ACCEPT","safeFilter","document","createNodeIterator","SHOW_ELEMENT","treeWalker","createTreeWalker","form","CONST","FIELD_SELECTOR","FAKE_INPUT_TYPES","fieldset","reset","MESSAGES","MISSING_FORM","toMap","demoronize","map","fields","utils","getChildFields","isSuccessfulField","fieldName","jQuery","fieldValue","prop","val","string","toHash","toJson","flatData","jsonData","toQueryString","j","appendQueryString","encodeURIComponent","fieldNode","isInputField","getFieldGroup","selector","find","each","index","item","localStorage","retrieve","root","getRootState","persist","json","setRootState","setItem","JSON","stringify","rootJson","getItem","parse","replace","RegExp","String","fromCharCode","format","pattern","queryToMap","tokens","decodeURIComponent","propertyPattern","populate","results","exec","property","test","CSS_CLASSES","MESSAGE","ERROR_MESSAGE","MSG_BOX_ID","generateBoxId","boxId","removeDisplayBox","oldBox","remove","displayMessage","html","displayBox","displayErrorMessage","cssClass","box","addClass","replaceWith","before","MIME_TYPE","DOM_ACTIVEX_NAME","evaluateXPath","retArray","ActiveXObject","selectedNodes","selectNodes","result","XPathEvaluator","evaluate","XPathResult","ORDERED_NODE_ITERATOR_TYPE","currentNode","iterateNext","nodeToString","XMLSerializer","serializeToString","parseFromString","xmlStr","xmlDOMObj","async","loadXML","DOMParser"],"mappings":"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","file":"luga.common.min.js","sourcesContent":["/*! \nLuga Common 0.9.7dev 2017-10-27T18:56:46.547Z\nCopyright 2013-2017 Massimo Foti (massimo@massimocorner.com)\nLicensed under the Apache License, Version 2.0 | http://www.apache.org/licenses/LICENSE-2.0\n */\n/* globals ActiveXObject */\r\n\r\n/* istanbul ignore if */\r\nif(typeof(jQuery) === \"undefined\"){\r\n\tthrow(\"Unable to find jQuery\");\r\n}\r\n/* istanbul ignore else */\r\nif(typeof(luga) === \"undefined\"){\r\n\tvar luga = {};\r\n}\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Creates namespaces to be used for scoping variables and classes so that they are not global.\r\n\t * Specifying the last node of a namespace implicitly creates all other nodes.\r\n\t * Based on Nicholas C. Zakas's code\r\n\t * @param {string} ns           Namespace as string\r\n\t * @param {object} [undefined] rootObject   Optional root object. Default to window\r\n\t */\r\n\tluga.namespace = function(ns, rootObject){\r\n\t\tvar parts = ns.split(\".\");\r\n\t\tif(rootObject === undefined){\r\n\t\t\trootObject = window;\r\n\t\t}\r\n\t\tfor(var i = 0; i < parts.length; i++){\r\n\t\t\tif(rootObject[parts[i]] === undefined){\r\n\t\t\t\trootObject[parts[i]] = {};\r\n\t\t\t}\r\n\t\t\trootObject = rootObject[parts[i]];\r\n\t\t}\r\n\t\treturn rootObject;\r\n\t};\r\n\r\n\tluga.namespace(\"luga.common\");\r\n\tluga.common.version = \"0.9.7dev\";\r\n\r\n\t/**\r\n\t * Offers a simple solution for inheritance among classes\r\n\t *\r\n\t * @param {function}           baseFunc  Parent constructor function. Required\r\n\t * @param {function}           func      Child constructor function. Required\r\n\t * @param {array} [undefined]  args      An array of arguments that will be passed to the parent's constructor. Optional\r\n\t */\r\n\tluga.extend = function(baseFunc, func, args){\r\n\t\tbaseFunc.apply(func, args);\r\n\t};\r\n\r\n\t/**\r\n\t * Return true if an object is an array. False otherwise\r\n\t * @param {*} obj\r\n\t * @returns {boolean}\r\n\t */\r\n\tluga.isArray = function(obj){\r\n\t\treturn Array.isArray(obj);\r\n\t};\r\n\r\n\t/**\r\n\t * Return true if an object is a function. False otherwise\r\n\t * @param {*} obj\r\n\t * @returns {boolean}\r\n\t */\r\n\tluga.isFunction = function(obj){\r\n\t\treturn luga.type(obj) === \"function\";\r\n\t};\r\n\r\n\t/**\r\n\t * Return true if an object is a plain object (created using \"{}\" or \"new Object\"). False otherwise\r\n\t * Based on jQuery.isPlainObject()\r\n\t * @param {*} obj\r\n\t * @returns {boolean}\r\n\t */\r\n\tluga.isPlainObject = function(obj){\r\n\t\t// Detect obvious negatives\r\n\t\t// Use Object.prototype.toString to catch host objects\r\n\t\tif(Object.prototype.toString.call(obj) !== \"[object Object]\"){\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tvar proto = Object.getPrototypeOf(obj);\r\n\r\n\t\t// Objects with no prototype (e.g., Object.create(null)) are plain\r\n\t\tif(proto === null){\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\t// Objects with prototype are plain if they were constructed by a global Object function\r\n\t\tvar constructor = Object.prototype.hasOwnProperty.call(proto, \"constructor\") && proto.constructor;\r\n\t\treturn typeof (constructor === \"function\") && (Function.toString.call(constructor) === Function.toString.call(Object));\r\n\t};\r\n\r\n\t/**\r\n\t * Given the name of a function as a string, return the relevant function, if any\r\n\t * Returns undefined, if the reference has not been found\r\n\t * Supports namespaces (if the fully qualified path is passed)\r\n\t * @param {string} path            Fully qualified name of a function\r\n\t * @returns {function|undefined}   The javascript reference to the function, undefined if nothing is fund or if it's not a function\r\n\t */\r\n\tluga.lookupFunction = function(path){\r\n\t\tif(!path){\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\tvar reference = luga.lookupProperty(window, path);\r\n\t\tif(luga.isFunction(reference) === true){\r\n\t\t\treturn reference;\r\n\t\t}\r\n\t\treturn undefined;\r\n\t};\r\n\r\n\t/**\r\n\t * Given an object and a path, returns the property located at the given path\r\n\t * If nothing exists at that location, returns undefined\r\n\t * Supports unlimited nesting levels (if the fully qualified path is passed)\r\n\t * @param {object} object  Target object\r\n\t * @param {string} path    Dot-delimited string\r\n\t * @returns {*|undefined}\r\n\t */\r\n\tluga.lookupProperty = function(object, path){\r\n\t\t// Either of the two params is invalid\r\n\t\tif(!object || !path){\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\t// Property live at the first level\r\n\t\tif(object[path] !== undefined){\r\n\t\t\treturn object[path];\r\n\t\t}\r\n\t\tvar parts = path.split(\".\");\r\n\t\twhile(parts.length > 0){\r\n\t\t\tvar part = parts.shift();\r\n\t\t\tif(object[part] !== undefined){\r\n\t\t\t\tif(parts.length === 0){\r\n\t\t\t\t\t// We got it\r\n\t\t\t\t\treturn object[part];\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\t// Keep looping\r\n\t\t\t\t\tobject = object[part];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn undefined;\r\n\t};\r\n\r\n\t/**\r\n\t * Shallow-merge the contents of two objects together into the first object\r\n\t *\r\n\t * @param {object} target  An object that will receive the new properties\r\n\t * @param {object} source     An object containing additional properties to merge in\r\n\t */\r\n\tluga.merge = function(target, source){\r\n\t\tfor(var x in source){\r\n\t\t\ttarget[x] = source[x];\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Given an object, a path and a value, set the property located at the given path to the given value\r\n\t * If the path does not exists, it creates it\r\n\t * @param {object} object  Target object\r\n\t * @param {string} path    Fully qualified property name\r\n\t * @param {*}      value\r\n\t */\r\n\tluga.setProperty = function(object, path, value){\r\n\t\tvar parts = path.split(\".\");\r\n\t\tif(parts.length === 1){\r\n\t\t\tobject[path] = value;\r\n\t\t}\r\n\t\twhile(parts.length > 0){\r\n\t\t\tvar part = parts.shift();\r\n\t\t\tif(object[part] !== undefined){\r\n\t\t\t\tif(parts.length === 0){\r\n\t\t\t\t\t// Update\r\n\t\t\t\t\tobject[part] = value;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\t// Keep looping\r\n\t\t\t\tobject = object[part];\r\n\t\t\t}\r\n\t\t\telse if(parts.length > 0){\r\n\t\t\t\t// Create the missing element and keep looping\r\n\t\t\t\tobject[part] = {};\r\n\t\t\t\tobject = object[part];\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tobject[part] = value;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tvar class2type = {};\r\n\t[\"Array\", \"Boolean\", \"Date\", \"Error\", \"Function\", \"Number\", \"Object\", \"RegExp\", \"String\", \"Symbol\"].forEach(function(element, i, collection){\r\n\t\tclass2type[\"[object \" + element + \"]\"] = element.toLowerCase();\r\n\t});\r\n\r\n\t/**\r\n\t * Determine the internal JavaScript [[Class]] of an object\r\n\t * Based on jQuery.type()\r\n\t * @param {*} obj\r\n\t * @returns {string}\r\n\t */\r\n\tluga.type = function(obj){\r\n\t\tif(obj === null){\r\n\t\t\treturn \"null\";\r\n\t\t}\r\n\t\tvar rawType = typeof obj;\r\n\t\tif((rawType === \"object\") || (rawType === \"function\")){\r\n\t\t\t/* http://perfectionkills.com/instanceof-considered-harmful-or-how-to-write-a-robust-isarray/ */\r\n\t\t\tvar stringType = Object.prototype.toString.call(obj);\r\n\t\t\treturn class2type[stringType];\r\n\t\t}\r\n\t\treturn rawType;\r\n\t};\r\n\r\n\tluga.NOTIFIER_CONST = {\r\n\t\tERROR_MESSAGES: {\r\n\t\t\tNOTIFIER_ABSTRACT: \"It's forbidden to use luga.Notifier directly, it must be used as a base class instead\",\r\n\t\t\tINVALID_OBSERVER_PARAMETER: \"addObserver(): observer parameter must be an object\",\r\n\t\t\tINVALID_DATA_PARAMETER: \"notifyObserver(): data parameter is required and must be an object\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Provides the base functionality necessary to maintain a list of observers and send notifications to them.\r\n\t * It's forbidden to use this class directly, it can only be used as a base class.\r\n\t * The Notifier class does not define any notification messages, so it is up to the developer to define the notifications sent via the Notifier.\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.Notifier = function(){\r\n\t\tif(this.constructor === luga.Notifier){\r\n\t\t\tthrow(luga.NOTIFIER_CONST.ERROR_MESSAGES.NOTIFIER_ABSTRACT);\r\n\t\t}\r\n\t\tthis.observers = [];\r\n\t\tvar prefix = \"on\";\r\n\t\tvar suffix = \"Handler\";\r\n\r\n\t\t// Turns \"complete\" into \"onComplete\"\r\n\t\tvar generateMethodName = function(eventName){\r\n\t\t\tvar str = prefix;\r\n\t\t\tstr += eventName.charAt(0).toUpperCase();\r\n\t\t\tstr += eventName.substring(1);\r\n\t\t\tstr += suffix;\r\n\t\t\treturn str;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Adds an observer object to the list of observers.\r\n\t\t * Observer objects should implement a method that matches a naming convention for the events they are interested in.\r\n\t\t * For an event named \"complete\" they must implement a method named: \"onCompleteHandler\"\r\n\t\t * The interface for this methods is as follows:\r\n\t\t * observer.onCompleteHandler = function(data){};\r\n\t\t * @param  {object} observer  Observer object\r\n\t\t * @throws {Exception}\r\n\t\t */\r\n\t\tthis.addObserver = function(observer){\r\n\t\t\tif(luga.type(observer) !== \"object\"){\r\n\t\t\t\tthrow(luga.NOTIFIER_CONST.ERROR_MESSAGES.INVALID_OBSERVER_PARAMETER);\r\n\t\t\t}\r\n\t\t\tthis.observers.push(observer);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sends a notification to all interested observers registered with the notifier.\r\n\t\t *\r\n\t\t * @method\r\n\t\t * @param {string}  eventName  Name of the event\r\n\t\t * @param {object}  payload    Object containing data to be passed from the point of notification to all interested observers.\r\n\t\t *                             If there is no relevant data to pass, use an empty object.\r\n\t\t * @throws {Exception}\r\n\t\t */\r\n\t\tthis.notifyObservers = function(eventName, payload){\r\n\t\t\tif(luga.type(payload) !== \"object\"){\r\n\t\t\t\tthrow(luga.NOTIFIER_CONST.ERROR_MESSAGES.INVALID_DATA_PARAMETER);\r\n\t\t\t}\r\n\t\t\tvar method = generateMethodName(eventName);\r\n\t\t\tfor(var i = 0; i < this.observers.length; i++){\r\n\t\t\t\tvar observer = this.observers[i];\r\n\t\t\t\tif(observer[method] && luga.isFunction(observer[method])){\r\n\t\t\t\t\tobserver[method](payload);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Removes the given observer object.\r\n\t\t *\r\n\t\t * @method\r\n\t\t * @param {Object} observer\r\n\t\t */\r\n\t\tthis.removeObserver = function(observer){\r\n\t\t\tfor(var i = 0; i < this.observers.length; i++){\r\n\t\t\t\tif(this.observers[i] === observer){\r\n\t\t\t\t\tthis.observers.splice(i, 1);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t};\r\n\r\n\t/* DOM */\r\n\r\n\tluga.namespace(\"luga.dom.nodeIterator\");\r\n\r\n\t/**\r\n\t * Static factory to create a cross-browser DOM NodeIterator\r\n\t * https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator\r\n\t *\r\n\t * @param {Node}                     rootNode    Start node. Required\r\n\t * @param {function} [undefined]     filterFunc  Optional filter function. If specified only nodes matching the filter will be accepted\r\n\t *                                   The function will be invoked with this signature: filterFunc(node). Must return true|false\r\n\t * @returns {NodeIterator}\r\n\t */\r\n\tluga.dom.nodeIterator.getInstance = function(rootNode, filterFunc){\r\n\r\n\t\tvar filter = {\r\n\t\t\tacceptNode: function(node){\r\n\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\tif(filterFunc !== undefined){\r\n\t\t\t\t\tif(filterFunc(node) === false){\r\n\t\t\t\t\t\treturn NodeFilter.FILTER_SKIP;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn NodeFilter.FILTER_ACCEPT;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// http://stackoverflow.com/questions/5982648/recommendations-for-working-around-ie9-treewalker-filter-bug\r\n\t\t// A true W3C-compliant nodeFilter object isn't passed, and instead a \"safe\" one _based_ off of the real one.\r\n\t\tvar safeFilter = filter.acceptNode;\r\n\t\tsafeFilter.acceptNode = filter.acceptNode;\r\n\t\treturn document.createNodeIterator(rootNode, NodeFilter.SHOW_ELEMENT, safeFilter, false);\r\n\t};\r\n\r\n\tluga.namespace(\"luga.dom.treeWalker\");\r\n\r\n\t/**\r\n\t * Static factory to create a cross-browser DOM TreeWalker\r\n\t * https://developer.mozilla.org/en/docs/Web/API/TreeWalker\r\n\t *\r\n\t * @param {Node}                     rootNode    Start node. Required\r\n\t * @param {function} [undefined]     filterFunc  Optional filter function. If specified only nodes matching the filter will be accepted\r\n\t *                                   The function will be invoked with this signature: filterFunc(node). Must return true|false\r\n\t * @returns {TreeWalker}\r\n\t */\r\n\tluga.dom.treeWalker.getInstance = function(rootNode, filterFunc){\r\n\r\n\t\tvar filter = {\r\n\t\t\tacceptNode: function(node){\r\n\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\tif(filterFunc !== undefined){\r\n\t\t\t\t\tif(filterFunc(node) === false){\r\n\t\t\t\t\t\treturn NodeFilter.FILTER_SKIP;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn NodeFilter.FILTER_ACCEPT;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// http://stackoverflow.com/questions/5982648/recommendations-for-working-around-ie9-treewalker-filter-bug\r\n\t\t// A true W3C-compliant nodeFilter object isn't passed, and instead a \"safe\" one _based_ off of the real one.\r\n\t\tvar safeFilter = filter.acceptNode;\r\n\t\tsafeFilter.acceptNode = filter.acceptNode;\r\n\t\treturn document.createTreeWalker(rootNode, NodeFilter.SHOW_ELEMENT, safeFilter, false);\r\n\t};\r\n\r\n\t/* Form */\r\n\r\n\tluga.namespace(\"luga.form\");\r\n\r\n\tluga.form.CONST = {\r\n\t\tFIELD_SELECTOR: \"input,select,textarea\",\r\n\t\tFAKE_INPUT_TYPES: {\r\n\t\t\tfieldset: true,\r\n\t\t\treset: true\r\n\t\t},\r\n\t\tMESSAGES: {\r\n\t\t\tMISSING_FORM: \"Unable to load form\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Returns a JavaScript object containing name/value pairs from fields contained inside a given root node\r\n\t * Only fields considered successful are returned:\r\n\t * http://www.w3.org/TR/REC-html40/interact/forms.html#h-17.13.2\r\n\t * Values of multiple checked checkboxes and multiple select are included as a single entry, with array value\r\n\t *\r\n\t * @param {jquery}   rootNode     jQuery object wrapping the root node\r\n\t * @param {boolean}  demoronize   MS Word's special chars are replaced with plausible substitutes. Default to false\r\n\t * @returns {object}              A JavaScript object containing name/value pairs\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.form.toMap = function(rootNode, demoronize){\r\n\r\n\t\tif(rootNode.length === 0){\r\n\t\t\tthrow(luga.form.CONST.MESSAGES.MISSING_FORM);\r\n\t\t}\r\n\r\n\t\tvar map = {};\r\n\t\tvar fields = luga.form.utils.getChildFields(rootNode);\r\n\t\tfor(var i = 0; i < fields.length; i++){\r\n\t\t\tif(luga.form.utils.isSuccessfulField(fields[i]) === true){\r\n\t\t\t\tvar fieldName = jQuery(fields[i]).attr(\"name\");\r\n\t\t\t\tvar fieldValue = null;\r\n\t\t\t\tvar fieldType = jQuery(fields[i]).prop(\"type\");\r\n\t\t\t\tswitch(fieldType){\r\n\r\n\t\t\t\t\tcase \"select-multiple\":\r\n\t\t\t\t\t\tfieldValue = jQuery(fields[i]).val();\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase \"checkbox\":\r\n\t\t\t\t\tcase \"radio\":\r\n\t\t\t\t\t\tif(jQuery(fields[i]).prop(\"checked\") === true){\r\n\t\t\t\t\t\t\tfieldValue = jQuery(fields[i]).val();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tfieldValue = jQuery(fields[i]).val();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(fieldValue !== null){\r\n\t\t\t\t\tif(demoronize === true){\r\n\t\t\t\t\t\tfieldValue = luga.string.demoronize(fieldValue);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(map[fieldName] === undefined){\r\n\t\t\t\t\t\tmap[fieldName] = fieldValue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if(luga.isArray(map[fieldName]) === true){\r\n\t\t\t\t\t\tmap[fieldName].push(fieldValue);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tmap[fieldName] = [map[fieldName], fieldValue];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn map;\r\n\t};\r\n\r\n\t/**\r\n\t * Deprecated. Use luga.form.toMap() instead\r\n\t * @deprecated\r\n\t */\r\n\tluga.form.toHash = function(rootNode, demoronize){\r\n\t\treturn luga.form.toMap(rootNode, demoronize);\r\n\t};\r\n\r\n\t/**\r\n\t * Given a form tag or another element wrapping input fields, serialize their value into JSON data\r\n\t * If fields names contains dots, their are handled as nested properties\r\n\t * Only fields considered successful are returned:\r\n\t * http://www.w3.org/TR/REC-html40/interact/forms.html#h-17.13.2\r\n\t * @param {jquery} rootNode  jQuery object wrapping the form fields\r\n\t * @returns {json}\r\n\t */\r\n\tluga.form.toJson = function(rootNode){\r\n\t\tvar flatData = luga.form.toMap(rootNode);\r\n\t\tvar jsonData = {};\r\n\t\tfor(var x in flatData){\r\n\t\t\tluga.setProperty(jsonData, x, flatData[x]);\r\n\t\t}\r\n\t\treturn jsonData;\r\n\t};\r\n\r\n\t/**\r\n\t * Returns a URI encoded string of name/value pairs from fields contained inside a given root node\r\n\t * Only fields considered successful are returned:\r\n\t * http://www.w3.org/TR/REC-html40/interact/forms.html#h-17.13.2\r\n\t *\r\n\t * @param {jquery}   rootNode     jQuery object wrapping the root node\r\n\t * @param {boolean}  demoronize   If set to true, MS Word's special chars are replaced with plausible substitutes. Default to false\r\n\t * @returns {string}               A URI encoded string\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.form.toQueryString = function(rootNode, demoronize){\r\n\r\n\t\tif(rootNode.length === 0){\r\n\t\t\tthrow(luga.form.CONST.MESSAGES.MISSING_FORM);\r\n\t\t}\r\n\r\n\t\tvar str = \"\";\r\n\t\tvar fields = luga.form.utils.getChildFields(rootNode);\r\n\t\tfor(var i = 0; i < fields.length; i++){\r\n\t\t\tif(luga.form.utils.isSuccessfulField(fields[i]) === true){\r\n\t\t\t\tvar fieldName = jQuery(fields[i]).attr(\"name\");\r\n\t\t\t\tvar fieldValue = jQuery(fields[i]).val();\r\n\t\t\t\tvar fieldType = jQuery(fields[i]).prop(\"type\");\r\n\t\t\t\tswitch(fieldType){\r\n\r\n\t\t\t\t\tcase \"select-multiple\":\r\n\t\t\t\t\t\tfor(var j = 0; j < fieldValue.length; j++){\r\n\t\t\t\t\t\t\tstr = appendQueryString(str, fieldName, fieldValue[j], demoronize);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase \"checkbox\":\r\n\t\t\t\t\tcase \"radio\":\r\n\t\t\t\t\t\tif(jQuery(fields[i]).prop(\"checked\") === true){\r\n\t\t\t\t\t\t\tstr = appendQueryString(str, fieldName, fieldValue, demoronize);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tstr = appendQueryString(str, fieldName, fieldValue, demoronize);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn str;\r\n\t};\r\n\r\n\tvar appendQueryString = function(str, fieldName, fieldValue, demoronize){\r\n\t\tif(str !== \"\"){\r\n\t\t\tstr += \"&\";\r\n\t\t}\r\n\t\tstr += encodeURIComponent(fieldName);\r\n\t\tstr += \"=\";\r\n\t\tif(demoronize === true){\r\n\t\t\tstr += encodeURIComponent(luga.string.demoronize(fieldValue));\r\n\t\t}\r\n\t\telse{\r\n\t\t\tstr += encodeURIComponent(fieldValue);\r\n\t\t}\r\n\t\treturn str;\r\n\t};\r\n\r\n\tluga.namespace(\"luga.form.utils\");\r\n\r\n\t/**\r\n\t * Returns true if the given field is successful, false otherwise\r\n\t * http://www.w3.org/TR/REC-html40/interact/forms.html#h-17.13.2\r\n\t *\r\n\t * @param {jquery}  fieldNode\r\n\t * @returns {boolean}\r\n\t */\r\n\tluga.form.utils.isSuccessfulField = function(fieldNode){\r\n\t\tif(luga.form.utils.isInputField(fieldNode) === false){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif(jQuery(fieldNode).prop(\"disabled\") === true){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif(jQuery(fieldNode).attr(\"name\") === undefined){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n\r\n\t/**\r\n\t * Returns true if the passed node is a form field that we care about\r\n\t *\r\n\t * @param {jquery}  fieldNode\r\n\t * @returns {boolean}\r\n\t */\r\n\tluga.form.utils.isInputField = function(fieldNode){\r\n\t\tif(jQuery(fieldNode).prop(\"type\") === undefined){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t// It belongs to the kind of nodes that are considered form fields, but we don't care about\r\n\t\tif(luga.form.CONST.FAKE_INPUT_TYPES[jQuery(fieldNode).prop(\"type\")] === true){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n\r\n\t/**\r\n\t * Extracts group of fields that share the same name from a given root node\r\n\t * Or the whole document if the second argument is not passed\r\n\t *\r\n\t * @param {string}              name       Name of the field. Mandatory\r\n\t * @param {jquery} [undefined]  rootNode   Root node, optional, default to document\r\n\t * @returns {jquery}\r\n\t */\r\n\tluga.form.utils.getFieldGroup = function(name, rootNode){\r\n\t\tvar selector = \"input[name='\" + name + \"']\";\r\n\t\treturn jQuery(selector, rootNode);\r\n\t};\r\n\r\n\t/**\r\n\t * Returns an array of input fields contained inside a given root node\r\n\t *\r\n\t * @param {jquery}  rootNode   Root node\r\n\t * @returns {Array.<jquery>}\r\n\t */\r\n\tluga.form.utils.getChildFields = function(rootNode){\r\n\t\tvar fields = [];\r\n\t\tjQuery(rootNode).find(luga.form.CONST.FIELD_SELECTOR).each(function(index, item){\r\n\t\t\tif(luga.form.utils.isInputField(item)){\r\n\t\t\t\tfields.push(item);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn fields;\r\n\t};\r\n\r\n\tluga.namespace(\"luga.localStorage\");\r\n\r\n\t/**\r\n\t * Retrieve from localStorage the string corresponding to the given combination of root and path\r\n\t * Returns undefined if nothing matches the given root/path\r\n\t * @param {string} root    Top-level key inside localStorage\r\n\t * @param {string} path    Dot-delimited string\r\n\t * @returns {*|undefined}\r\n\t */\r\n\tluga.localStorage.retrieve = function(root, path){\r\n\t\treturn luga.lookupProperty(getRootState(root), path);\r\n\t};\r\n\r\n\t/**\r\n\t * Persist the given string inside localStorage, under the given combination of root and path\r\n\t * The ability to pass a dot-delimited path allow to protect the information from name clashes\r\n\t * @param {string} root    Top-level key inside localStorage\r\n\t * @param {string} path    Dot-delimited string\r\n\t * @param {string} value   String to be persisted\r\n\t * @returns {*|undefined}\r\n\t */\r\n\tluga.localStorage.persist = function(root, path, value){\r\n\t\tvar json = getRootState(root);\r\n\t\tluga.setProperty(json, path, value);\r\n\t\tsetRootState(root, json);\r\n\t};\r\n\r\n\tvar setRootState = function(root, json){\r\n\t\tlocalStorage.setItem(root, JSON.stringify(json));\r\n\t};\r\n\r\n\tvar getRootState = function(root){\r\n\t\tvar rootJson = localStorage.getItem(root);\r\n\t\tif(rootJson === null){\r\n\t\t\treturn {};\r\n\t\t}\r\n\t\treturn JSON.parse(rootJson);\r\n\t};\r\n\r\n\tluga.namespace(\"luga.string\");\r\n\r\n\t/**\r\n\t * Replace MS Word's non-ISO characters with plausible substitutes\r\n\t *\r\n\t * @param {string} str   String containing MS Word's garbage\r\n\t * @returns {string}      The de-moronized string\r\n\t */\r\n\tluga.string.demoronize = function(str){\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(710), \"g\"), \"^\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(732), \"g\"), \"~\");\r\n\t\t// Evil \"smarty\" quotes\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8216), \"g\"), \"'\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8217), \"g\"), \"'\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8220), \"g\"), \"\\\"\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8221), \"g\"), \"\\\"\");\r\n\t\t// More garbage\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8211), \"g\"), \"-\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8212), \"g\"), \"--\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8218), \"g\"), \",\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8222), \"g\"), \",,\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8226), \"g\"), \"*\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8230), \"g\"), \"...\");\r\n\t\treturn str;\r\n\t};\r\n\r\n\t/**\r\n\t * Given a string containing placeholders, it assembles a new string\r\n\t * replacing the placeholders with the strings contained inside the second argument (either an object or an array)\r\n\t * Loosely based on the .NET implementation: http://msdn.microsoft.com/en-us/library/system.string.format.aspx\r\n\t *\r\n\t * Example passing strings inside an array:\r\n\t * luga.string.format(\"My name is {0} {1}\", [\"Ciccio\", \"Pasticcio\"]);\r\n\t * => \"My name is Ciccio Pasticcio\"\r\n\t *\r\n\t * Example passing strings inside an object:\r\n\t * luga.string.format(\"My name is {firstName} {lastName}\", {firstName: \"Ciccio\", lastName: \"Pasticcio\"});\r\n\t * => \"My name is Ciccio Pasticcio\"\r\n\t *\r\n\t * @param  {string}  str                   String containing placeholders\r\n\t * @param  {object|array.<string>} args    Either an array of strings or an objects containing name/value pairs in string format\r\n\t * @returns {string} The newly assembled string\r\n\t */\r\n\tluga.string.format = function(str, args){\r\n\t\tvar pattern = null;\r\n\t\tif(luga.isArray(args) === true){\r\n\t\t\tfor(var i = 0; i < args.length; i++){\r\n\t\t\t\tpattern = new RegExp(\"\\\\{\" + i + \"\\\\}\", \"g\");\r\n\t\t\t\tstr = str.replace(pattern, args[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(luga.isPlainObject(args) === true){\r\n\t\t\tfor(var x in args){\r\n\t\t\t\tpattern = new RegExp(\"\\\\{\" + x + \"\\\\}\", \"g\");\r\n\t\t\t\tstr = str.replace(pattern, args[x]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn str;\r\n\t};\r\n\r\n\t/**\r\n\t * Given a string in querystring format, return a JavaScript object containing name/value pairs\r\n\t * @param {string} str  The querystring\r\n\t * @returns {object}\r\n\t */\r\n\tluga.string.queryToMap = function(str){\r\n\t\tvar map = {};\r\n\t\tif(str.charAt(0) === \"?\"){\r\n\t\t\tstr = str.substring(1);\r\n\t\t}\r\n\t\tif(str.length === 0){\r\n\t\t\treturn map;\r\n\t\t}\r\n\t\tvar parts = str.split(\"&\");\r\n\r\n\t\tfor(var i = 0; i < parts.length; i++){\r\n\t\t\tvar tokens = parts[i].split(\"=\");\r\n\t\t\tvar fieldName = decodeURIComponent(tokens[0]);\r\n\t\t\tvar fieldValue = \"\";\r\n\t\t\tif(tokens.length === 2){\r\n\t\t\t\tfieldValue = decodeURIComponent(tokens[1]);\r\n\t\t\t}\r\n\t\t\tif(map[fieldName] === undefined){\r\n\t\t\t\tmap[fieldName] = fieldValue;\r\n\t\t\t}\r\n\t\t\telse if(luga.isArray(map[fieldName]) === true){\r\n\t\t\t\tmap[fieldName].push(fieldValue);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tmap[fieldName] = [map[fieldName], fieldValue];\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn map;\r\n\t};\r\n\r\n\tvar propertyPattern = new RegExp(\"\\\\{([^}]*)}\", \"g\");\r\n\r\n\t/**\r\n\t * Given a string containing placeholders in {key} format, it assembles a new string\r\n\t * populating the placeholders with the strings contained inside the second argument keys\r\n\t * Unlike luga.string.format, placeholders can match nested properties too. But it's slower\r\n\t *\r\n\t * Example:\r\n\t * luga.string.format(\"My name is {firstName} {lastName}\", {firstName: \"Ciccio\", lastName: \"Pasticcio\"});\r\n\t * => \"My name is Ciccio Pasticcio\"\r\n\t *\r\n\t * Example with nested properties:\r\n\t * var nestedObj = { type: \"people\", person: { firstName: \"Ciccio\", lastName: \"Pasticcio\" } };\r\n\t * luga.string.populate(\"My name is {person.firstName} {person.lastName}\", nestedObj)\r\n\t * => \"My name is Ciccio Pasticcio\"\r\n\t *\r\n\t * @param   {string} str   String containing placeholders\r\n\t * @param   {object} obj   An objects containing name/value pairs in string format\r\n\t * @returns {string} The newly assembled string\r\n\t */\r\n\tluga.string.populate = function(str, obj){\r\n\t\tif(luga.isPlainObject(obj) === true){\r\n\t\t\tvar results;\r\n\t\t\twhile((results = propertyPattern.exec(str)) !== null){\r\n\t\t\t\tvar property = luga.lookupProperty(obj, results[1]);\r\n\t\t\t\tif(property !== undefined){\r\n\t\t\t\t\tvar pattern = new RegExp(results[0], \"g\");\r\n\t\t\t\t\tstr = str.replace(pattern, property);\r\n\t\t\t\t\t// Keep searching\r\n\t\t\t\t\tpropertyPattern.test(str);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn str;\r\n\t};\r\n\r\n\tluga.namespace(\"luga.utils\");\r\n\r\n\tluga.utils.CONST = {\r\n\t\tCSS_CLASSES: {\r\n\t\t\tMESSAGE: \"luga-message\",\r\n\t\t\tERROR_MESSAGE: \"luga-error-message\"\r\n\t\t},\r\n\t\tMSG_BOX_ID: \"lugaMessageBox\"\r\n\t};\r\n\r\n\t/**\r\n\t * Private helper function\r\n\t * Generate node's id\r\n\t */\r\n\tvar generateBoxId = function(node){\r\n\t\tvar boxId = luga.utils.CONST.MSG_BOX_ID;\r\n\t\tif(node.attr(\"id\") === undefined){\r\n\t\t\tboxId += node.attr(\"id\");\r\n\t\t}\r\n\t\telse if(node.attr(\"name\") !== undefined){\r\n\t\t\tboxId += node.attr(\"name\");\r\n\t\t}\r\n\t\treturn boxId;\r\n\t};\r\n\r\n\t/**\r\n\t * Remove a message box (if any) associated with a given node\r\n\t * @param {jquery}  node   Target node\r\n\t */\r\n\tluga.utils.removeDisplayBox = function(node){\r\n\t\tvar boxId = generateBoxId(jQuery(node));\r\n\t\tvar oldBox = jQuery(\"#\" + boxId);\r\n\t\t// If an error display is already there, get rid of it\r\n\t\t/* istanbul ignore else */\r\n\t\tif(oldBox.length > 0){\r\n\t\t\toldBox.remove();\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Display a message box above a given node\r\n\t * @param {jquery}  node   Target node\r\n\t * @param {string}  html   HTML/Text code to inject\r\n\t */\r\n\tluga.utils.displayMessage = function(node, html){\r\n\t\treturn luga.utils.displayBox(node, html, luga.utils.CONST.CSS_CLASSES.MESSAGE);\r\n\t};\r\n\r\n\t/**\r\n\t * Display an error box above a given node\r\n\t * @param {jquery}  node   Target node\r\n\t * @param {string}  html   HTML/Text code to inject\r\n\t */\r\n\tluga.utils.displayErrorMessage = function(node, html){\r\n\t\treturn luga.utils.displayBox(node, html, luga.utils.CONST.CSS_CLASSES.ERROR_MESSAGE);\r\n\t};\r\n\r\n\t/**\r\n\t * Display a box with a message associated with a given node\r\n\t * Overwrite this method if you want to change the way luga.utils.displayMessage and luga.utils.displayErrorMessage behaves\r\n\t * @param {jquery}  node      Target node\r\n\t * @param {string}  html      HTML/Text code to inject\r\n\t * @param {string}  cssClass  CSS class attached to the box. Default to \"luga_message\"\r\n\t */\r\n\tluga.utils.displayBox = function(node, html, cssClass){\r\n\t\tif(cssClass === undefined){\r\n\t\t\tcssClass = luga.utils.CONST.CSS_CLASSES.MESSAGE;\r\n\t\t}\r\n\t\tvar boxId = generateBoxId(jQuery(node));\r\n\t\tvar box = jQuery(\"<div></div>\");\r\n\t\tbox.attr(\"id\", boxId);\r\n\t\tbox.addClass(cssClass);\r\n\t\tbox.html(html);\r\n\t\tvar oldBox = jQuery(\"#\" + boxId);\r\n\t\t// If a box display is already there, replace it, if not, we create one from scratch\r\n\t\tif(oldBox.length > 0){\r\n\t\t\toldBox.replaceWith(box);\r\n\t\t}\r\n\t\telse{\r\n\t\t\tjQuery(node).before(box);\r\n\t\t}\r\n\t\treturn box;\r\n\t};\r\n\r\n\t/* XML */\r\n\r\n\tluga.namespace(\"luga.xml\");\r\n\r\n\tluga.xml.MIME_TYPE = \"application/xml\";\r\n\tluga.xml.ATTRIBUTE_PREFIX = \"_\";\r\n\tluga.xml.DOM_ACTIVEX_NAME = \"MSXML2.DOMDocument.4.0\";\r\n\r\n\t/**\r\n\t * Given a DOM node, evaluate an XPath expression against it\r\n\t * Results are returned as an array of nodes. An empty array is returned in case there is no match\r\n\t * @param {Node} node\r\n\t * @param {string} path\r\n\t * @returns {Array<Node>}\r\n\t */\r\n\tluga.xml.evaluateXPath = function(node, path){\r\n\t\tvar retArray = [];\r\n\t\t/* istanbul ignore if IE-only */\r\n\t\tif(window.ActiveXObject !== undefined){\r\n\t\t\tvar selectedNodes = node.selectNodes(path);\r\n\t\t\t// Extract the nodes out of the nodeList returned by selectNodes and put them into an array\r\n\t\t\t// We could directly use the nodeList returned by selectNodes, but this would cause inconsistencies across browsers\r\n\t\t\tfor(var i = 0; i < selectedNodes.length; i++){\r\n\t\t\t\tretArray.push(selectedNodes[i]);\r\n\t\t\t}\r\n\t\t\treturn retArray;\r\n\t\t}\r\n\t\telse{\r\n\t\t\tvar evaluator = new XPathEvaluator();\r\n\t\t\tvar result = evaluator.evaluate(path, node, null, XPathResult.ORDERED_NODE_ITERATOR_TYPE, null);\r\n\t\t\tvar currentNode = result.iterateNext();\r\n\t\t\t// Iterate and populate the array\r\n\t\t\twhile(currentNode !== null){\r\n\t\t\t\tretArray.push(currentNode);\r\n\t\t\t\tcurrentNode = result.iterateNext();\r\n\t\t\t}\r\n\t\t\treturn retArray;\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Convert an XML node into a JavaScript object\r\n\t * @param {Node} node\r\n\t * @returns {object}\r\n\t */\r\n\tluga.xml.nodeToHash = function(node){\r\n\t\tvar obj = {};\r\n\t\tattributesToProperties(node, obj);\r\n\t\tchildrenToProperties(node, obj);\r\n\t\treturn obj;\r\n\t};\r\n\r\n\t/**\r\n\t * Map attributes to properties\r\n\t * @param {Node}   node\r\n\t * @param {object} obj\r\n\t */\r\n\tfunction attributesToProperties(node, obj){\r\n\t\tif((node.attributes === null) || (node.attributes === undefined)){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tfor(var i = 0; i < node.attributes.length; i++){\r\n\t\t\tvar attr = node.attributes[i];\r\n\t\t\tobj[luga.xml.ATTRIBUTE_PREFIX + attr.name] = attr.value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Map child nodes to properties\r\n\t * @param {Node}   node\r\n\t * @param {object} obj\r\n\t */\r\n\tfunction childrenToProperties(node, obj){\r\n\t\tfor(var i = 0; i < node.childNodes.length; i++){\r\n\t\t\tvar child = node.childNodes[i];\r\n\r\n\t\t\tif(child.nodeType === 1 /* Node.ELEMENT_NODE */){\r\n\t\t\t\tvar isArray = false;\r\n\t\t\t\tvar tagName = child.nodeName;\r\n\r\n\t\t\t\tif(obj[tagName] !== undefined){\r\n\t\t\t\t\t// If the property exists already, turn it into an array\r\n\t\t\t\t\tif(obj[tagName].constructor !== Array){\r\n\t\t\t\t\t\tvar curValue = obj[tagName];\r\n\t\t\t\t\t\tobj[tagName] = [];\r\n\t\t\t\t\t\tobj[tagName].push(curValue);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tisArray = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(nodeHasText(child) === true){\r\n\t\t\t\t\t// This may potentially override an existing property\r\n\t\t\t\t\tobj[child.nodeName] = getTextValue(child);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tvar childObj = luga.xml.nodeToHash(child);\r\n\t\t\t\t\tif(isArray === true){\r\n\t\t\t\t\t\tobj[tagName].push(childObj);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tobj[tagName] = childObj;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Extract text out of a TEXT or CDATA node\r\n\t * @param {Node} node\r\n\t * @returns {string}\r\n\t */\r\n\tfunction getTextValue(node){\r\n\t\tvar child = node.childNodes[0];\r\n\t\t/* istanbul ignore else */\r\n\t\tif((child.nodeType === 3) /* TEXT_NODE */ || (child.nodeType === 4) /* CDATA_SECTION_NODE */){\r\n\t\t\treturn child.data;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Return true if a node contains value, false otherwise\r\n\t * @param {Node}   node\r\n\t * @returns {boolean}\r\n\t */\r\n\tfunction nodeHasText(node){\r\n\t\tvar child = node.childNodes[0];\r\n\t\tif((child !== null) && (child.nextSibling === null) && (child.nodeType === 3 /* Node.TEXT_NODE */ || child.nodeType === 4 /* CDATA_SECTION_NODE */)){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Serialize a DOM node into a string\r\n\t * @param {Node}   node\r\n\t * @returns {string}\r\n\t */\r\n\tluga.xml.nodeToString = function(node){\r\n\t\t/* istanbul ignore if IE-only */\r\n\t\tif(window.ActiveXObject !== undefined){\r\n\t\t\treturn node.xml;\r\n\t\t}\r\n\t\telse{\r\n\t\t\tvar serializer = new XMLSerializer();\r\n\t\t\treturn serializer.serializeToString(node, luga.xml.MIME_TYPE);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Create a DOM Document out of a string\r\n\t * @param {string} xmlStr\r\n\t * @returns {Document}\r\n\t */\r\n\tluga.xml.parseFromString = function(xmlStr){\r\n\t\tvar xmlParser;\r\n\t\t/* istanbul ignore if IE-only */\r\n\t\tif(window.ActiveXObject !== undefined){\r\n\t\t\tvar xmlDOMObj = new ActiveXObject(luga.xml.DOM_ACTIVEX_NAME);\r\n\t\t\txmlDOMObj.async = false;\r\n\t\t\txmlDOMObj.loadXML(xmlStr);\r\n\t\t\treturn xmlDOMObj;\r\n\t\t}\r\n\t\telse{\r\n\t\t\txmlParser = new DOMParser();\r\n\t\t\tvar domDoc = xmlParser.parseFromString(xmlStr, luga.xml.MIME_TYPE);\r\n\t\t\treturn domDoc;\r\n\t\t}\r\n\t};\r\n\r\n}());"],"sourceRoot":"."}